{"ast":null,"code":"import _asyncToGenerator from \"C:/_git/OpenAI/EwrsDocAnalyses/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../service/http.service\";\nexport class HomeComponent {\n  constructor(http, baseUrl, httpService) {\n    this.httpService = httpService;\n    result$: Observable;\n    //var ttt = this.getServer();\n    this.getData();\n    // const httpOptions = {\n    //   headers: new HttpHeaders({\n    //     'Content-Type': 'application/json', // Set the content type to JSON\n    //   }),\n    // };\n    // const data = { message: \"bonjour je vais bien\" };\n    // http.post<any>(baseUrl + 'home/postdata', JSON.stringify(data), httpOptions)\n    //   .subscribe(result => {\n    //     console.log(result);\n    //   }, error => console.error(error));\n  }\n\n  getServer() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const httpSetting = {\n        method: 'GET',\n        url: location.origin + \"/home\"\n      };\n      return _this.httpService.xhr(httpSetting);\n    })();\n  }\n  getData() {\n    result$: Observable;\n    const apiUrl = location.origin + \"/home/bonjourget\"; // Replace with your API URL\n    this.httpService.xhr({\n      url: apiUrl,\n      method: 'GET'\n    }).subscribe(response => {\n      console.log(response);\n    }, error => {\n      console.error('Error:', error);\n    });\n  }\n}\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'), i0.ɵɵdirectiveInject(i2.HttpService));\n};\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 67,\n  vars: 0,\n  consts: [[\"href\", \"https://get.asp.net/\"], [\"href\", \"https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx\"], [\"href\", \"https://angular.io/\"], [\"href\", \"http://www.typescriptlang.org/\"], [\"href\", \"http://getbootstrap.com/\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Hello, world!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"Welcome to your new single-page application, built with:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ul\")(5, \"li\")(6, \"a\", 0);\n      i0.ɵɵtext(7, \"ASP.NET Core\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(8, \" and \");\n      i0.ɵɵelementStart(9, \"a\", 1);\n      i0.ɵɵtext(10, \"C#\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(11, \" for cross-platform server-side code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"li\")(13, \"a\", 2);\n      i0.ɵɵtext(14, \"Angular\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(15, \" and \");\n      i0.ɵɵelementStart(16, \"a\", 3);\n      i0.ɵɵtext(17, \"TypeScript\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18, \" for client-side code\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"li\")(20, \"a\", 4);\n      i0.ɵɵtext(21, \"Bootstrap\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(22, \" for layout and styling\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"p\");\n      i0.ɵɵtext(24, \"To help you get started, we've also set up:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"ul\")(26, \"li\")(27, \"strong\");\n      i0.ɵɵtext(28, \"Client-side navigation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(29, \". For example, click \");\n      i0.ɵɵelementStart(30, \"em\");\n      i0.ɵɵtext(31, \"Counter\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(32, \" then \");\n      i0.ɵɵelementStart(33, \"em\");\n      i0.ɵɵtext(34, \"Back\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(35, \" to return here.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"li\")(37, \"strong\");\n      i0.ɵɵtext(38, \"Angular CLI integration\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(39, \". In development mode, there's no need to run \");\n      i0.ɵɵelementStart(40, \"code\");\n      i0.ɵɵtext(41, \"ng serve\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(42, \". It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"li\")(44, \"strong\");\n      i0.ɵɵtext(45, \"Efficient production builds\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(46, \". In production mode, development-time features are disabled, and your \");\n      i0.ɵɵelementStart(47, \"code\");\n      i0.ɵɵtext(48, \"dotnet publish\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(49, \" configuration automatically invokes \");\n      i0.ɵɵelementStart(50, \"code\");\n      i0.ɵɵtext(51, \"ng build\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(52, \" to produce minified, ahead-of-time compiled JavaScript files.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(53, \"p\");\n      i0.ɵɵtext(54, \"The \");\n      i0.ɵɵelementStart(55, \"code\");\n      i0.ɵɵtext(56, \"ClientApp\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(57, \" subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any \");\n      i0.ɵɵelementStart(58, \"code\");\n      i0.ɵɵtext(59, \"ng\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(60, \" command (e.g., \");\n      i0.ɵɵelementStart(61, \"code\");\n      i0.ɵɵtext(62, \"ng test\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(63, \"), or use \");\n      i0.ɵɵelementStart(64, \"code\");\n      i0.ɵɵtext(65, \"npm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(66, \" to install extra packages into it.\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":";AAGA,SAASA,UAAU,QAAQ,MAAM;;;;AAMjC,OAAM,MAAOC,aAAa;EAExBC,YAAYC,IAAgB,EACNC,OAAe,EAC3BC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAEjBC,OAAO,EAAEN,UAAe;IACxB;IACA,IAAI,CAACO,OAAO,EAAE;IAChB;IACA;IACA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;EACF;;EAEMC,SAAS;IAAA;IAAA;MAEb,MAAMC,WAAW,GAAiB;QAChCC,MAAM,EAAE,KAAK;QACbC,GAAG,EAAEC,QAAQ,CAACC,MAAM,GAAG;OACxB;MAED,OAAO,KAAI,CAACR,WAAW,CAACS,GAAG,CAAML,WAAW,CAAC;IAAC;EAChD;EAEAF,OAAO;IACLD,OAAO,EAAEN,UAAe;IAExB,MAAMe,MAAM,GAAGH,QAAQ,CAACC,MAAM,GAAG,kBAAkB,CAAC,CAAC;IAErD,IAAI,CAACR,WAAW,CAACS,GAAG,CAAM;MAAEH,GAAG,EAAEI,MAAM;MAAEL,MAAM,EAAE;IAAK,CAAE,CAAC,CAACM,SAAS,CAChEC,QAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAAEF,QAAQ,CAAC;IACxB,CAAC,EACAG,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CACF;EACH;;AA9CWnB,aAAa;mBAAbA,aAAa,4DAGd,UAAU;AAAA;AAHTA,aAAa;QAAbA,aAAa;EAAAoB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCT1BC,0BAAI;MAAAA,6BAAa;MAAAA,iBAAK;MACtBA,yBAAG;MAAAA,wEAAwD;MAAAA,iBAAI;MAC/DA,0BAAI;MACiCA,4BAAY;MAAAA,iBAAI;MAACA,qBAAI;MAAAA,4BAAiE;MAAAA,mBAAE;MAAAA,iBAAI;MAACA,qDAAmC;MAAAA,iBAAK;MACxKA,2BAAI;MAA8BA,wBAAO;MAAAA,iBAAI;MAACA,sBAAI;MAAAA,6BAAyC;MAAAA,2BAAU;MAAAA,iBAAI;MAACA,sCAAoB;MAAAA,iBAAK;MACnIA,2BAAI;MAAmCA,0BAAS;MAAAA,iBAAI;MAACA,wCAAsB;MAAAA,iBAAK;MAElFA,0BAAG;MAAAA,4DAA2C;MAAAA,iBAAI;MAClDA,2BAAI;MACUA,uCAAsB;MAAAA,iBAAS;MAAAA,sCAAqB;MAAAA,2BAAI;MAAAA,wBAAO;MAAAA,iBAAK;MAACA,uBAAK;MAAAA,2BAAI;MAAAA,qBAAI;MAAAA,iBAAK;MAACA,iCAAe;MAAAA,iBAAK;MACxHA,2BAAI;MAAQA,wCAAuB;MAAAA,iBAAS;MAAAA,+DAA8C;MAAAA,6BAAM;MAAAA,yBAAQ;MAAAA,iBAAO;MAAAA,0KAAyJ;MAAAA,iBAAK;MAC7QA,2BAAI;MAAQA,4CAA2B;MAAAA,iBAAS;MAAAA,wFAAuE;MAAAA,6BAAM;MAAAA,+BAAc;MAAAA,iBAAO;MAACA,sDAAoC;MAAAA,6BAAM;MAAAA,yBAAQ;MAAAA,iBAAO;MAACA,+EAA6D;MAAAA,iBAAK;MAEjRA,0BAAG;MAAAA,qBAAI;MAAAA,6BAAM;MAAAA,0BAAS;MAAAA,iBAAO;MAACA,sIAAoH;MAAAA,6BAAM;MAAAA,mBAAE;MAAAA,iBAAO;MAACA,iCAAe;MAAAA,6BAAM;MAAAA,wBAAO;MAAAA,iBAAO;MAAAA,2BAAU;MAAAA,6BAAM;MAAAA,oBAAG;MAAAA,iBAAO;MAACA,oDAAkC;MAAAA,iBAAI","names":["Observable","HomeComponent","constructor","http","baseUrl","httpService","result$","getData","getServer","httpSetting","method","url","location","origin","xhr","apiUrl","subscribe","response","console","log","error","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\_git\\OpenAI\\EwrsDocAnalyses\\ClientApp\\src\\app\\home\\home.component.ts","C:\\_git\\OpenAI\\EwrsDocAnalyses\\ClientApp\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { HttpSettings, HttpService } from '../service/http.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n \r\n  constructor(http: HttpClient, \r\n    @Inject('BASE_URL') baseUrl: string,\r\n    private httpService: HttpService) {\r\n\r\n      result$: Observable<any>;\r\n      //var ttt = this.getServer();\r\n      this.getData();\r\n    // const httpOptions = {\r\n    //   headers: new HttpHeaders({\r\n    //     'Content-Type': 'application/json', // Set the content type to JSON\r\n    //   }),\r\n    // };\r\n\r\n    // const data = { message: \"bonjour je vais bien\" };\r\n\r\n    // http.post<any>(baseUrl + 'home/postdata', JSON.stringify(data), httpOptions)\r\n    //   .subscribe(result => {\r\n    //     console.log(result);\r\n    //   }, error => console.error(error));\r\n  }\r\n\r\n  async getServer() {\r\n    \r\n    const httpSetting: HttpSettings = {\r\n      method: 'GET',\r\n      url: location.origin + \"/home\",\r\n    };\r\n\r\n    return this.httpService.xhr<any>(httpSetting);\r\n  }\r\n\r\n  getData() {\r\n    result$: Observable<any>;\r\n    \r\n    const apiUrl = location.origin + \"/home/bonjourget\"; // Replace with your API URL\r\n\r\n    this.httpService.xhr<any>({ url: apiUrl, method: 'GET' }).subscribe(\r\n      (response) => {\r\n        console.log( response);\r\n      },\r\n      (error) => {\r\n        console.error('Error:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n\r\n","<h1>Hello, world!</h1>\r\n<p>Welcome to your new single-page application, built with:</p>\r\n<ul>\r\n  <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n  <li><a href='https://angular.io/'>Angular</a> and <a href='http://www.typescriptlang.org/'>TypeScript</a> for client-side code</li>\r\n  <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n</ul>\r\n<p>To help you get started, we've also set up:</p>\r\n<ul>\r\n  <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n  <li><strong>Angular CLI integration</strong>. In development mode, there's no need to run <code>ng serve</code>. It runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n  <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration automatically invokes <code>ng build</code> to produce minified, ahead-of-time compiled JavaScript files.</li>\r\n</ul>\r\n<p>The <code>ClientApp</code> subdirectory is a standard Angular CLI application. If you open a command prompt in that directory, you can run any <code>ng</code> command (e.g., <code>ng test</code>), or use <code>npm</code> to install extra packages into it.</p>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}