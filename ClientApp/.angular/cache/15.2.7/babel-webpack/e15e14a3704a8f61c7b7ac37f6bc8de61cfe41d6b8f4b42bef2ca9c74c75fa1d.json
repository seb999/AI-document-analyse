{"ast":null,"code":"import _asyncToGenerator from \"C:/_git/OpenAI/EwrsDocAnalyses/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  constructor(http, baseUrl, httpService, signalRService) {\n    this.httpService = httpService;\n    this.signalRService = signalRService;\n    this.files = [];\n    this.docxContent = \"\";\n    this.theText = \"Je vais bien et je vais continuer comme ca\";\n    this.baseUrl = baseUrl;\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.signalRService.startConnection();\n      _this.signalRService.openDataListener();\n      _this.signalRService.onMessage().subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (message) {\n          _this.serverMsg = message;\n          if (_this.serverMsg.msgName == 'newFile') {\n            _this.theText = _this.serverMsg.data;\n          }\n          console.log(_this.serverMsg);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  getData() {\n    const apiUrl = this.baseUrl + \"home/bonjourget\"; // Replace with your API URL\n    this.httpService.xhr({\n      url: apiUrl,\n      method: 'GET'\n    }).subscribe(response => {\n      console.log(response);\n    }, error => {\n      console.error('Error:', error);\n    });\n  }\n  getMetadata() {\n    const apiUrl = this.baseUrl + \"home/GetMetadata\";\n    this.httpService.xhr({\n      url: apiUrl,\n      method: 'POST',\n      data: this.theText\n    }).subscribe(response => {\n      console.log(response);\n      this.metaData = response;\n    }, error => {\n      console.error('Error:', error);\n    });\n  }\n  dropped(files) {\n    this.files = files;\n    console.log(files);\n    for (const droppedFile of files) {\n      // Is it a file?\n      if (droppedFile.fileEntry.isFile) {\n        const fileEntry = droppedFile.fileEntry;\n        fileEntry.file(file => {\n          this.downloadFile(file);\n        });\n      } else {\n        // It was a directory (empty directories are added, otherwise only files)\n        const fileEntry = droppedFile.fileEntry;\n        console.log(droppedFile.relativePath, fileEntry);\n      }\n    }\n  }\n  fileOver(event) {\n    console.log(event);\n  }\n  fileLeave(event) {\n    console.log(event);\n  }\n  downloadFile(file) {\n    const blob = new Blob([file], {\n      type: file.type\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n}), __param(1, Inject('BASE_URL'))], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","HomeComponent","constructor","http","baseUrl","httpService","signalRService","ngOnInit","startConnection","openDataListener","onMessage","subscribe","message","serverMsg","msgName","theText","data","console","log","getData","apiUrl","xhr","url","method","response","error","getMetadata","metaData","dropped","files","droppedFile","fileEntry","isFile","file","downloadFile","relativePath","fileOver","event","fileLeave","blob","Blob","type","window","URL","createObjectURL","a","document","createElement","style","display","href","download","name","body","appendChild","click","revokeObjectURL","selector","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["C:\\_git\\OpenAI\\EwrsDocAnalyses\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { HttpSettings, HttpService } from '../service/http.service';\r\nimport { Observable } from 'rxjs';\r\nimport { NgxFileDropEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from 'ngx-file-drop';\r\nimport { SignalRService } from '../service/signalR.service';\r\nimport { ServerMsg } from '../class/serverMsg';\r\n\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css'],\r\n})\r\nexport class HomeComponent {\r\n\r\n  private baseUrl: string;\r\n  public files: NgxFileDropEntry[] = [];\r\n  public docxContent: string = \"\";\r\n  public serverMsg: ServerMsg | undefined;\r\n  public theText:string = \"Je vais bien et je vais continuer comme ca\";\r\n  public metaData:any;\r\n\r\n  constructor(http: HttpClient,\r\n    @Inject('BASE_URL') baseUrl: string,\r\n    private httpService: HttpService,\r\n    private signalRService: SignalRService,) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.signalRService.startConnection();\r\n    this.signalRService.openDataListener();\r\n\r\n    this.signalRService.onMessage().subscribe(async (message: ServerMsg) => {\r\n      this.serverMsg = message;\r\n      if (this.serverMsg.msgName == 'newFile') {\r\n        this.theText = this.serverMsg.data;\r\n      }\r\n      console.log(this.serverMsg);\r\n    });\r\n  }\r\n\r\n  getData() {\r\n    const apiUrl = this.baseUrl + \"home/bonjourget\"; // Replace with your API URL\r\n\r\n    this.httpService.xhr<any>({ url: apiUrl, method: 'GET' }).subscribe(\r\n      (response) => {\r\n        console.log(response);\r\n      },\r\n      (error) => {\r\n        console.error('Error:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getMetadata() {\r\n    const apiUrl = this.baseUrl + \"home/GetMetadata\";\r\n\r\n    this.httpService.xhr<any>({ url: apiUrl, method: 'POST', data: this.theText }).subscribe(\r\n      (response) => {\r\n        console.log(response);\r\n       this.metaData = response;\r\n      },\r\n      (error) => {\r\n        console.error('Error:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  public dropped(files: NgxFileDropEntry[]) {\r\n    this.files = files;\r\n    console.log(files);\r\n    for (const droppedFile of files) {\r\n\r\n      // Is it a file?\r\n      if (droppedFile.fileEntry.isFile) {\r\n        const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;\r\n        fileEntry.file((file: File) => {\r\n          this.downloadFile(file);\r\n        });\r\n      } else {\r\n        // It was a directory (empty directories are added, otherwise only files)\r\n        const fileEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\r\n        console.log(droppedFile.relativePath, fileEntry);\r\n      }\r\n    }\r\n  }\r\n\r\n  public fileOver(event: any) {\r\n    console.log(event);\r\n  }\r\n\r\n  public fileLeave(event: any) {\r\n    console.log(event);\r\n  }\r\n\r\n  private downloadFile(file: File) {\r\n    const blob = new Blob([file], { type: file.type });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.style.display = 'none';\r\n    a.href = url;\r\n    a.download = file.name;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}