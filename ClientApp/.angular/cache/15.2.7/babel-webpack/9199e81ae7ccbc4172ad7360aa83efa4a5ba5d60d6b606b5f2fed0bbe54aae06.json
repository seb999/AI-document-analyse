{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpService {\n  constructor(http) {\n    this.http = http;\n  }\n  xhr(settings) {\n    if (!settings.method) {\n      settings.method = 'GET';\n    }\n    switch (settings.method) {\n      case 'GET':\n        return this.http.get(settings.url, {\n          headers: this.getHeaders(settings.headers)\n        });\n      case 'POST':\n        return this.http.post(settings.url, JSON.stringify(settings.data), {\n          headers: this.getHeaders(settings.headers)\n        });\n      case 'PUT':\n        return this.http.put(settings.url, settings.data, {\n          headers: this.getHeaders(settings.headers)\n        });\n      case 'DELETE':\n        return this.http.delete(settings.url, {\n          headers: this.getHeaders(settings.headers)\n        });\n    }\n  }\n  getHeaders(headers) {\n    let httpHeaders = new HttpHeaders();\n    // Check if headers are provided, if not, add JSON content type header\n    if (!headers) {\n      httpHeaders = httpHeaders.append('Content-Type', 'application/json');\n    } else {\n      Object.keys(headers).forEach(key => {\n        httpHeaders = httpHeaders.append(key, headers[key]);\n      });\n    }\n    return httpHeaders;\n  }\n}\nHttpService.ɵfac = function HttpService_Factory(t) {\n  return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n};\nHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpService,\n  factory: HttpService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAEjCC,GAAG,CAAIC,QAAsB;IAClC,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;MACpBD,QAAQ,CAACC,MAAM,GAAG,KAAK;;IAGzB,QAAQD,QAAQ,CAACC,MAAM;MACrB,KAAK,KAAK;QACR,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAIF,QAAQ,CAACG,GAAG,EAAE;UAAEC,OAAO,EAAE,IAAI,CAACC,UAAU,CAACL,QAAQ,CAACI,OAAO;QAAC,CAAE,CAAC;MACvF,KAAK,MAAM;QACT,OAAO,IAAI,CAACN,IAAI,CAACQ,IAAI,CAAIN,QAAQ,CAACG,GAAG,EAAEI,IAAI,CAACC,SAAS,CAACR,QAAQ,CAACS,IAAI,CAAC,EAAE;UAAEL,OAAO,EAAE,IAAI,CAACC,UAAU,CAACL,QAAQ,CAACI,OAAO;QAAC,CAAE,CAAC;MACvH,KAAK,KAAK;QACR,OAAO,IAAI,CAACN,IAAI,CAACY,GAAG,CAAIV,QAAQ,CAACG,GAAG,EAAEH,QAAQ,CAACS,IAAI,EAAE;UAAEL,OAAO,EAAE,IAAI,CAACC,UAAU,CAACL,QAAQ,CAACI,OAAO;QAAC,CAAE,CAAC;MACtG,KAAK,QAAQ;QACX,OAAO,IAAI,CAACN,IAAI,CAACa,MAAM,CAAIX,QAAQ,CAACG,GAAG,EAAE;UAAEC,OAAO,EAAE,IAAI,CAACC,UAAU,CAACL,QAAQ,CAACI,OAAO;QAAC,CAAE,CAAC;IAAC;EAE/F;EAEQC,UAAU,CAACD,OAAY;IAC7B,IAAIQ,WAAW,GAAgB,IAAIjB,WAAW,EAAE;IAEhD;IACA,IAAI,CAACS,OAAO,EAAE;MACZQ,WAAW,GAAGA,WAAW,CAACC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;KACrE,MAAM;MACLC,MAAM,CAACC,IAAI,CAACX,OAAO,CAAC,CAACY,OAAO,CAACC,GAAG,IAAG;QACjCL,WAAW,GAAGA,WAAW,CAACC,MAAM,CAACI,GAAG,EAAEb,OAAO,CAACa,GAAG,CAAC,CAAC;MACrD,CAAC,CAAC;;IAEJ,OAAOL,WAAW;EACpB;;AAjCWhB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFV;AAAM","names":["HttpHeaders","HttpService","constructor","http","xhr","settings","method","get","url","headers","getHeaders","post","JSON","stringify","data","put","delete","httpHeaders","append","Object","keys","forEach","key","factory","providedIn"],"sourceRoot":"","sources":["C:\\_git\\OpenAI\\EwrsDocAnalyses\\ClientApp\\src\\app\\service\\http.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public xhr<T>(settings: HttpSettings): Observable<T> {\r\n    if (!settings.method) {\r\n      settings.method = 'GET';\r\n    }\r\n\r\n    switch (settings.method) {\r\n      case 'GET':\r\n        return this.http.get<T>(settings.url, { headers: this.getHeaders(settings.headers) });\r\n      case 'POST':\r\n        return this.http.post<T>(settings.url, JSON.stringify(settings.data), { headers: this.getHeaders(settings.headers) });\r\n      case 'PUT':\r\n        return this.http.put<T>(settings.url, settings.data, { headers: this.getHeaders(settings.headers) });\r\n      case 'DELETE':\r\n        return this.http.delete<T>(settings.url, { headers: this.getHeaders(settings.headers) });\r\n    }\r\n  }\r\n\r\n  private getHeaders(headers: any): HttpHeaders {\r\n    let httpHeaders: HttpHeaders = new HttpHeaders();\r\n\r\n    // Check if headers are provided, if not, add JSON content type header\r\n    if (!headers) {\r\n      httpHeaders = httpHeaders.append('Content-Type', 'application/json');\r\n    } else {\r\n      Object.keys(headers).forEach(key => {\r\n        httpHeaders = httpHeaders.append(key, headers[key]);\r\n      });\r\n    }\r\n    return httpHeaders;\r\n  }\r\n}\r\n\r\nexport interface HttpSettings {\r\n  url: string;\r\n  dataType?: string;\r\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\r\n  data?: any;\r\n  headers?: any;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}