{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as signalR from \"@microsoft/signalr\";\nimport * as i0 from \"@angular/core\";\nexport class SignalRService {\n  constructor() {\n    this.eventMessage = new EventEmitter();\n    this.startConnection = () => {\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl('/Signalr').withAutomaticReconnect().build();\n      this.hubConnection.start().then(() => console.log('Connection started')).catch(err => console.log('Error while starting SignalR connection: ' + err));\n    };\n    this.closeConnection = () => {\n      this.hubConnection?.stop();\n    };\n    this.openDataListener = () => {\n      this.hubConnection?.on(\"NewFile\", data => {\n        let serverMsg = {\n          msgName: \"NewFile\",\n          data: JSON.parse(data)\n        };\n        return this.eventMessage.emit(serverMsg);\n      });\n    };\n  }\n  onMessage() {\n    return this.eventMessage;\n  }\n}\nSignalRService.ɵfac = function SignalRService_Factory(t) {\n  return new (t || SignalRService)();\n};\nSignalRService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SignalRService,\n  factory: SignalRService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAoB,eAAe;AACxD,OAAO,KAAKC,OAAO,MAAM,oBAAoB;;AAM7C,OAAM,MAAOC,cAAc;EAH3BC;IAMW,iBAAY,GAA4B,IAAIH,YAAY,EAAE;IAE1D,oBAAe,GAAG,MAAK;MAC1B,IAAI,CAACI,aAAa,GAAG,IAAIH,OAAO,CAACI,oBAAoB,EAAE,CACpDC,OAAO,CAAC,UAAU,CAAC,CACnBC,sBAAsB,EAAE,CACxBC,KAAK,EAAE;MAEV,IAAI,CAACJ,aAAa,CACbK,KAAK,EAAE,CACPC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAC7CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAAC,2CAA2C,GAAGE,GAAG,CAAC,CAAC;IACrF,CAAC;IAMM,oBAAe,GAAG,MAAK;MAC1B,IAAI,CAACV,aAAa,EAAEW,IAAI,EAAE;IAC9B,CAAC;IAEM,qBAAgB,GAAG,MAAK;MAE3B,IAAI,CAACX,aAAa,EAAEY,EAAE,CAAC,SAAS,EAAGC,IAAQ,IAAI;QAC3C,IAAIC,SAAS,GAAc;UACvBC,OAAO,EAAE,SAAS;UAClBF,IAAI,EAAEG,IAAI,CAACC,KAAK,CAACJ,IAAI;SACxB;QACD,OAAO,IAAI,CAACK,YAAY,CAACC,IAAI,CAACL,SAAS,CAAC;MAC5C,CAAC,CAAC;IACN,CAAC;;EAjBMM,SAAS;IACZ,OAAO,IAAI,CAACF,YAAY;EAC5B;;AAnBSpB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAuB,SAAdvB,cAAc;EAAAwB,YAFX;AAAM","names":["EventEmitter","signalR","SignalRService","constructor","hubConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","console","log","catch","err","stop","on","data","serverMsg","msgName","JSON","parse","eventMessage","emit","onMessage","factory","providedIn"],"sourceRoot":"","sources":["C:\\_git\\OpenAI\\EwrsDocAnalyses\\ClientApp\\src\\app\\service\\signalR.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport * as signalR from \"@microsoft/signalr\";\r\nimport { ServerMsg } from '../class/serverMsg';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SignalRService {\r\n    public data: any;\r\n    private hubConnection: signalR.HubConnection | undefined;\r\n    public eventMessage: EventEmitter<ServerMsg> = new EventEmitter();\r\n\r\n    public startConnection = () => {\r\n        this.hubConnection = new signalR.HubConnectionBuilder()\r\n          .withUrl('/Signalr')\r\n          .withAutomaticReconnect()\r\n          .build();\r\n\r\n        this.hubConnection\r\n            .start()\r\n            .then(() => console.log('Connection started'))\r\n            .catch(err => console.log('Error while starting SignalR connection: ' + err))\r\n    }\r\n\r\n    public onMessage() {\r\n        return this.eventMessage;\r\n    }\r\n\r\n    public closeConnection = () => {\r\n        this.hubConnection?.stop();\r\n    }\r\n\r\n    public openDataListener = () => {\r\n\r\n        this.hubConnection?.on(\"NewFile\", (data:any) => {\r\n            let serverMsg: ServerMsg = {\r\n                msgName: \"NewFile\",\r\n                data: JSON.parse(data)\r\n            }\r\n            return this.eventMessage.emit(serverMsg);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}