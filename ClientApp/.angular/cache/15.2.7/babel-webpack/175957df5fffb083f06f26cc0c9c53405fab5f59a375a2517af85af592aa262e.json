{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Input, Output, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { timer } from 'rxjs';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\nconst _c0 = [\"fileSelector\"];\nfunction NgxFileDropComponent_ng_template_4_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.dropZoneLabel);\n  }\n}\nfunction NgxFileDropComponent_ng_template_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 9);\n    i0.ɵɵlistener(\"click\", function NgxFileDropComponent_ng_template_4_div_1_Template_input_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.openFileSelector($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r5.browseBtnLabel);\n    i0.ɵɵproperty(\"className\", ctx_r5.browseBtnClassName);\n  }\n}\nfunction NgxFileDropComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NgxFileDropComponent_ng_template_4_div_0_Template, 2, 1, \"div\", 6);\n    i0.ɵɵtemplate(1, NgxFileDropComponent_ng_template_4_div_1_Template, 2, 2, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.dropZoneLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showBrowseBtn);\n  }\n}\nfunction NgxFileDropComponent_ng_template_6_Template(rf, ctx) {}\nconst _c1 = function (a0) {\n  return {\n    openFileSelector: a0\n  };\n};\nclass NgxFileDropEntry {\n  constructor(relativePath, fileEntry) {\n    this.relativePath = relativePath;\n    this.fileEntry = fileEntry;\n  }\n}\nclass NgxFileDropContentTemplateDirective {\n  constructor(template) {\n    this.template = template;\n  }\n}\nNgxFileDropContentTemplateDirective.ɵfac = function NgxFileDropContentTemplateDirective_Factory(t) {\n  return new (t || NgxFileDropContentTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\nNgxFileDropContentTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxFileDropContentTemplateDirective,\n  selectors: [[\"\", \"ngx-file-drop-content-tmp\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxFileDropContentTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-file-drop-content-tmp]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\nclass NgxFileDropComponent {\n  constructor(zone, renderer) {\n    this.zone = zone;\n    this.renderer = renderer;\n    this.accept = '*';\n    this.directory = false;\n    this.multiple = true;\n    this.dropZoneLabel = '';\n    this.dropZoneClassName = 'ngx-file-drop__drop-zone';\n    this.useDragEnter = false;\n    this.contentClassName = 'ngx-file-drop__content';\n    this.showBrowseBtn = false;\n    this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\n    this.browseBtnLabel = 'Browse files';\n    this.onFileDrop = new EventEmitter();\n    this.onFileOver = new EventEmitter();\n    this.onFileLeave = new EventEmitter();\n    this.isDraggingOverDropZone = false;\n    this.globalDraggingInProgress = false;\n    this.files = [];\n    this.numOfActiveReadEntries = 0;\n    this.helperFormEl = null;\n    this.fileInputPlaceholderEl = null;\n    this.dropEventTimerSubscription = null;\n    this._disabled = false;\n    this.openFileSelector = event => {\n      if (this.fileSelector && this.fileSelector.nativeElement) {\n        this.fileSelector.nativeElement.click();\n      }\n    };\n    this.globalDragStartListener = this.renderer.listen('document', 'dragstart', evt => {\n      this.globalDraggingInProgress = true;\n    });\n    this.globalDragEndListener = this.renderer.listen('document', 'dragend', evt => {\n      this.globalDraggingInProgress = false;\n    });\n  }\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value != null && `${value}` !== 'false';\n  }\n  ngOnDestroy() {\n    if (this.dropEventTimerSubscription) {\n      this.dropEventTimerSubscription.unsubscribe();\n      this.dropEventTimerSubscription = null;\n    }\n    this.globalDragStartListener();\n    this.globalDragEndListener();\n    this.files = [];\n    this.helperFormEl = null;\n    this.fileInputPlaceholderEl = null;\n  }\n  onDragOver(event) {\n    if (this.useDragEnter) {\n      this.preventAndStop(event);\n      if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'copy';\n      }\n    } else if (!this.isDropzoneDisabled() && !this.useDragEnter && event.dataTransfer) {\n      if (!this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = true;\n        this.onFileOver.emit(event);\n      }\n      this.preventAndStop(event);\n      event.dataTransfer.dropEffect = 'copy';\n    }\n  }\n  onDragEnter(event) {\n    if (!this.isDropzoneDisabled() && this.useDragEnter) {\n      if (!this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = true;\n        this.onFileOver.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n  onDragLeave(event) {\n    if (!this.isDropzoneDisabled()) {\n      if (this.isDraggingOverDropZone) {\n        this.isDraggingOverDropZone = false;\n        this.onFileLeave.emit(event);\n      }\n      this.preventAndStop(event);\n    }\n  }\n  dropFiles(event) {\n    if (this.isDropzoneDisabled()) {\n      return;\n    }\n    this.isDraggingOverDropZone = false;\n    if (event.dataTransfer) {\n      let items;\n      if (event.dataTransfer.items) {\n        items = event.dataTransfer.items;\n      } else {\n        items = event.dataTransfer.files;\n      }\n      this.preventAndStop(event);\n      this.checkFiles(items);\n    }\n  }\n  /**\r\n   * Processes the change event of the file input and adds the given files.\r\n   * @param Event event\r\n   */\n  uploadFiles(event) {\n    if (this.isDropzoneDisabled()) {\n      return;\n    }\n    if (event.target) {\n      const items = event.target.files || [];\n      this.checkFiles(items);\n      this.resetFileInput();\n    }\n  }\n  getFakeDropEntry(file) {\n    const fakeFileEntry = {\n      name: file.name,\n      isDirectory: false,\n      isFile: true,\n      file: callback => callback(file)\n    };\n    return new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\n  }\n  checkFile(item) {\n    if (!item) {\n      return;\n    }\n    // if (\"getAsFile\" in item) {\n    //   const file = item.getAsFile();\n    //   if (file) {\n    //     this.addToQueue(\n    //       this.getFakeDropEntry(file)\n    //     );\n    //     return;\n    //   }\n    // }\n    if (\"webkitGetAsEntry\" in item) {\n      let entry = item.webkitGetAsEntry();\n      if (entry) {\n        if (entry.isFile) {\n          const toUpload = new NgxFileDropEntry(entry.name, entry);\n          this.addToQueue(toUpload);\n        } else if (entry.isDirectory) {\n          this.traverseFileTree(entry, entry.name);\n        }\n        return;\n      }\n    }\n    this.addToQueue(this.getFakeDropEntry(item));\n  }\n  checkFiles(items) {\n    for (let i = 0; i < items.length; i++) {\n      this.checkFile(items[i]);\n    }\n    if (this.dropEventTimerSubscription) {\n      this.dropEventTimerSubscription.unsubscribe();\n    }\n    this.dropEventTimerSubscription = timer(200, 200).subscribe(() => {\n      if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\n        const files = this.files;\n        this.files = [];\n        this.onFileDrop.emit(files);\n      }\n    });\n  }\n  traverseFileTree(item, path) {\n    if (item.isFile) {\n      const toUpload = new NgxFileDropEntry(path, item);\n      this.files.push(toUpload);\n    } else {\n      path = path + '/';\n      const dirReader = item.createReader();\n      let entries = [];\n      const readEntries = () => {\n        this.numOfActiveReadEntries++;\n        dirReader.readEntries(result => {\n          if (!result.length) {\n            // add empty folders\n            if (entries.length === 0) {\n              const toUpload = new NgxFileDropEntry(path, item);\n              this.zone.run(() => {\n                this.addToQueue(toUpload);\n              });\n            } else {\n              for (let i = 0; i < entries.length; i++) {\n                this.zone.run(() => {\n                  this.traverseFileTree(entries[i], path + entries[i].name);\n                });\n              }\n            }\n          } else {\n            // continue with the reading\n            entries = entries.concat(result);\n            readEntries();\n          }\n          this.numOfActiveReadEntries--;\n        });\n      };\n      readEntries();\n    }\n  }\n  /**\r\n   * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n   */\n  resetFileInput() {\n    if (this.fileSelector && this.fileSelector.nativeElement) {\n      const fileInputEl = this.fileSelector.nativeElement;\n      const fileInputContainerEl = fileInputEl.parentElement;\n      const helperFormEl = this.getHelperFormElement();\n      const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();\n      // Just a quick check so we do not mess up the DOM (will never happen though).\n      if (fileInputContainerEl !== helperFormEl) {\n        // Insert the form input placeholder in the DOM before the form input element.\n        this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);\n        // Add the form input as child of the temporary form element, removing the form input from the DOM.\n        this.renderer.appendChild(helperFormEl, fileInputEl);\n        // Reset the form, thus clearing the input element of any files.\n        helperFormEl.reset();\n        // Add the file input back to the DOM in place of the file input placeholder element.\n        this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);\n        // Remove the input placeholder from the DOM\n        this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\n      }\n    }\n  }\n  /**\r\n   * Get a cached HTML form element as a helper element to clear the file input element.\r\n   */\n  getHelperFormElement() {\n    if (!this.helperFormEl) {\n      this.helperFormEl = this.renderer.createElement('form');\n    }\n    return this.helperFormEl;\n  }\n  /**\r\n   * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n   */\n  getFileInputPlaceholderElement() {\n    if (!this.fileInputPlaceholderEl) {\n      this.fileInputPlaceholderEl = this.renderer.createElement('div');\n    }\n    return this.fileInputPlaceholderEl;\n  }\n  isDropzoneDisabled() {\n    return this.globalDraggingInProgress || this.disabled;\n  }\n  addToQueue(item) {\n    this.files.push(item);\n  }\n  preventAndStop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\nNgxFileDropComponent.ɵfac = function NgxFileDropComponent_Factory(t) {\n  return new (t || NgxFileDropComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nNgxFileDropComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxFileDropComponent,\n  selectors: [[\"ngx-file-drop\"]],\n  contentQueries: function NgxFileDropComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, NgxFileDropContentTemplateDirective, 5, TemplateRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n    }\n  },\n  viewQuery: function NgxFileDropComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileSelector = _t.first);\n    }\n  },\n  inputs: {\n    accept: \"accept\",\n    directory: \"directory\",\n    multiple: \"multiple\",\n    dropZoneLabel: \"dropZoneLabel\",\n    dropZoneClassName: \"dropZoneClassName\",\n    useDragEnter: \"useDragEnter\",\n    contentClassName: \"contentClassName\",\n    showBrowseBtn: \"showBrowseBtn\",\n    browseBtnClassName: \"browseBtnClassName\",\n    browseBtnLabel: \"browseBtnLabel\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    onFileDrop: \"onFileDrop\",\n    onFileOver: \"onFileOver\",\n    onFileLeave: \"onFileLeave\"\n  },\n  decls: 7,\n  vars: 15,\n  consts: [[3, \"className\", \"drop\", \"dragover\", \"dragenter\", \"dragleave\"], [3, \"className\"], [\"type\", \"file\", 1, \"ngx-file-drop__file-input\", 3, \"accept\", \"multiple\", \"change\"], [\"fileSelector\", \"\"], [\"defaultContentTemplate\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"ngx-file-drop__drop-zone-label\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"ngx-file-drop__drop-zone-label\"], [\"type\", \"button\", 3, \"className\", \"value\", \"click\"]],\n  template: function NgxFileDropComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"drop\", function NgxFileDropComponent_Template_div_drop_0_listener($event) {\n        return ctx.dropFiles($event);\n      })(\"dragover\", function NgxFileDropComponent_Template_div_dragover_0_listener($event) {\n        return ctx.onDragOver($event);\n      })(\"dragenter\", function NgxFileDropComponent_Template_div_dragenter_0_listener($event) {\n        return ctx.onDragEnter($event);\n      })(\"dragleave\", function NgxFileDropComponent_Template_div_dragleave_0_listener($event) {\n        return ctx.onDragLeave($event);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"input\", 2, 3);\n      i0.ɵɵlistener(\"change\", function NgxFileDropComponent_Template_input_change_2_listener($event) {\n        return ctx.uploadFiles($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, NgxFileDropComponent_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(6, NgxFileDropComponent_ng_template_6_Template, 0, 0, \"ng-template\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(5);\n      i0.ɵɵclassProp(\"ngx-file-drop__drop-zone--over\", ctx.isDraggingOverDropZone);\n      i0.ɵɵproperty(\"className\", ctx.dropZoneClassName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"className\", ctx.contentClassName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"accept\", ctx.accept)(\"multiple\", ctx.multiple);\n      i0.ɵɵattribute(\"directory\", ctx.directory || undefined)(\"webkitdirectory\", ctx.directory || undefined)(\"mozdirectory\", ctx.directory || undefined)(\"msdirectory\", ctx.directory || undefined)(\"odirectory\", ctx.directory || undefined);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate || _r1)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c1, ctx.openFileSelector));\n    }\n  },\n  dependencies: [i1.NgIf, i1.NgTemplateOutlet],\n  styles: [\".ngx-file-drop__drop-zone[_ngcontent-%COMP%]{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over[_ngcontent-%COMP%]{background-color:#93939380}.ngx-file-drop__content[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label[_ngcontent-%COMP%]{text-align:center}.ngx-file-drop__file-input[_ngcontent-%COMP%]{display:none}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxFileDropComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-file-drop',\n      template: \"<div [className]=\\\"dropZoneClassName\\\"\\r\\n     [class.ngx-file-drop__drop-zone--over]=\\\"isDraggingOverDropZone\\\"\\r\\n     (drop)=\\\"dropFiles($event)\\\"\\r\\n     (dragover)=\\\"onDragOver($event)\\\"\\r\\n     (dragenter)=\\\"onDragEnter($event)\\\"\\r\\n     (dragleave)=\\\"onDragLeave($event)\\\">\\r\\n  <div [className]=\\\"contentClassName\\\">\\r\\n    <input \\r\\n      type=\\\"file\\\" \\r\\n      #fileSelector \\r\\n      [accept]=\\\"accept\\\" \\r\\n      [attr.directory]=\\\"directory || undefined\\\" \\r\\n      [attr.webkitdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.mozdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.msdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.odirectory]=\\\"directory || undefined\\\"\\r\\n      [multiple]=\\\"multiple\\\"\\r\\n      (change)=\\\"uploadFiles($event)\\\" \\r\\n      class=\\\"ngx-file-drop__file-input\\\" \\r\\n    />\\r\\n\\r\\n    <ng-template #defaultContentTemplate>\\r\\n      <div *ngIf=\\\"dropZoneLabel\\\" class=\\\"ngx-file-drop__drop-zone-label\\\">{{dropZoneLabel}}</div>\\r\\n      <div *ngIf=\\\"showBrowseBtn\\\">\\r\\n        <input type=\\\"button\\\" [className]=\\\"browseBtnClassName\\\" value=\\\"{{browseBtnLabel}}\\\" (click)=\\\"openFileSelector($event)\\\" />\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template\\r\\n      [ngTemplateOutlet]=\\\"contentTemplate || defaultContentTemplate\\\"\\r\\n      [ngTemplateOutletContext]=\\\"{ openFileSelector: openFileSelector }\\\">\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\\r\\n\",\n      styles: [\".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:#93939380}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    accept: [{\n      type: Input\n    }],\n    directory: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    dropZoneLabel: [{\n      type: Input\n    }],\n    dropZoneClassName: [{\n      type: Input\n    }],\n    useDragEnter: [{\n      type: Input\n    }],\n    contentClassName: [{\n      type: Input\n    }],\n    showBrowseBtn: [{\n      type: Input\n    }],\n    browseBtnClassName: [{\n      type: Input\n    }],\n    browseBtnLabel: [{\n      type: Input\n    }],\n    onFileDrop: [{\n      type: Output\n    }],\n    onFileOver: [{\n      type: Output\n    }],\n    onFileLeave: [{\n      type: Output\n    }],\n    contentTemplate: [{\n      type: ContentChild,\n      args: [NgxFileDropContentTemplateDirective, {\n        read: TemplateRef\n      }]\n    }],\n    fileSelector: [{\n      type: ViewChild,\n      args: ['fileSelector', {\n        static: true\n      }]\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxFileDropModule {}\nNgxFileDropModule.ɵfac = function NgxFileDropModule_Factory(t) {\n  return new (t || NgxFileDropModule)();\n};\nNgxFileDropModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxFileDropModule,\n  bootstrap: [NgxFileDropComponent]\n});\nNgxFileDropModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxFileDropModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxFileDropComponent, NgxFileDropContentTemplateDirective],\n      imports: [CommonModule],\n      exports: [NgxFileDropComponent, NgxFileDropContentTemplateDirective],\n      providers: [],\n      bootstrap: [NgxFileDropComponent]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxFileDropComponent, NgxFileDropContentTemplateDirective, NgxFileDropEntry, NgxFileDropModule };","map":{"version":3,"names":["i0","Directive","EventEmitter","TemplateRef","Component","Input","Output","ContentChild","ViewChild","NgModule","timer","i1","CommonModule","NgxFileDropEntry","constructor","relativePath","fileEntry","NgxFileDropContentTemplateDirective","template","ɵfac","ɵdir","type","args","selector","NgxFileDropComponent","zone","renderer","accept","directory","multiple","dropZoneLabel","dropZoneClassName","useDragEnter","contentClassName","showBrowseBtn","browseBtnClassName","browseBtnLabel","onFileDrop","onFileOver","onFileLeave","isDraggingOverDropZone","globalDraggingInProgress","files","numOfActiveReadEntries","helperFormEl","fileInputPlaceholderEl","dropEventTimerSubscription","_disabled","openFileSelector","event","fileSelector","nativeElement","click","globalDragStartListener","listen","evt","globalDragEndListener","disabled","value","ngOnDestroy","unsubscribe","onDragOver","preventAndStop","dataTransfer","dropEffect","isDropzoneDisabled","emit","onDragEnter","onDragLeave","dropFiles","items","checkFiles","uploadFiles","target","resetFileInput","getFakeDropEntry","file","fakeFileEntry","name","isDirectory","isFile","callback","checkFile","item","entry","webkitGetAsEntry","toUpload","addToQueue","traverseFileTree","i","length","subscribe","path","push","dirReader","createReader","entries","readEntries","result","run","concat","fileInputEl","fileInputContainerEl","parentElement","getHelperFormElement","getFileInputPlaceholderElement","insertBefore","appendChild","reset","removeChild","createElement","stopPropagation","preventDefault","NgZone","Renderer2","ɵcmp","NgIf","NgTemplateOutlet","styles","contentTemplate","read","static","NgxFileDropModule","ɵmod","ɵinj","declarations","imports","exports","providers","bootstrap"],"sources":["C:/_git/OpenAI/EwrsDocAnalyses/ClientApp/node_modules/ngx-file-drop/fesm2020/ngx-file-drop.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, EventEmitter, TemplateRef, Component, Input, Output, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { timer } from 'rxjs';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nclass NgxFileDropEntry {\r\n    constructor(relativePath, fileEntry) {\r\n        this.relativePath = relativePath;\r\n        this.fileEntry = fileEntry;\r\n    }\r\n}\n\nclass NgxFileDropContentTemplateDirective {\r\n    constructor(template) {\r\n        this.template = template;\r\n    }\r\n}\r\nNgxFileDropContentTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropContentTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxFileDropContentTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0\", type: NgxFileDropContentTemplateDirective, selector: \"[ngx-file-drop-content-tmp]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropContentTemplateDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{ selector: '[ngx-file-drop-content-tmp]' }]\r\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass NgxFileDropComponent {\r\n    constructor(zone, renderer) {\r\n        this.zone = zone;\r\n        this.renderer = renderer;\r\n        this.accept = '*';\r\n        this.directory = false;\r\n        this.multiple = true;\r\n        this.dropZoneLabel = '';\r\n        this.dropZoneClassName = 'ngx-file-drop__drop-zone';\r\n        this.useDragEnter = false;\r\n        this.contentClassName = 'ngx-file-drop__content';\r\n        this.showBrowseBtn = false;\r\n        this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\r\n        this.browseBtnLabel = 'Browse files';\r\n        this.onFileDrop = new EventEmitter();\r\n        this.onFileOver = new EventEmitter();\r\n        this.onFileLeave = new EventEmitter();\r\n        this.isDraggingOverDropZone = false;\r\n        this.globalDraggingInProgress = false;\r\n        this.files = [];\r\n        this.numOfActiveReadEntries = 0;\r\n        this.helperFormEl = null;\r\n        this.fileInputPlaceholderEl = null;\r\n        this.dropEventTimerSubscription = null;\r\n        this._disabled = false;\r\n        this.openFileSelector = (event) => {\r\n            if (this.fileSelector && this.fileSelector.nativeElement) {\r\n                this.fileSelector.nativeElement.click();\r\n            }\r\n        };\r\n        this.globalDragStartListener = this.renderer.listen('document', 'dragstart', (evt) => {\r\n            this.globalDraggingInProgress = true;\r\n        });\r\n        this.globalDragEndListener = this.renderer.listen('document', 'dragend', (evt) => {\r\n            this.globalDraggingInProgress = false;\r\n        });\r\n    }\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) {\r\n        this._disabled = (value != null && `${value}` !== 'false');\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.dropEventTimerSubscription) {\r\n            this.dropEventTimerSubscription.unsubscribe();\r\n            this.dropEventTimerSubscription = null;\r\n        }\r\n        this.globalDragStartListener();\r\n        this.globalDragEndListener();\r\n        this.files = [];\r\n        this.helperFormEl = null;\r\n        this.fileInputPlaceholderEl = null;\r\n    }\r\n    onDragOver(event) {\r\n        if (this.useDragEnter) {\r\n            this.preventAndStop(event);\r\n            if (event.dataTransfer) {\r\n                event.dataTransfer.dropEffect = 'copy';\r\n            }\r\n        }\r\n        else if (!this.isDropzoneDisabled() && !this.useDragEnter && event.dataTransfer) {\r\n            if (!this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = true;\r\n                this.onFileOver.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n            event.dataTransfer.dropEffect = 'copy';\r\n        }\r\n    }\r\n    onDragEnter(event) {\r\n        if (!this.isDropzoneDisabled() && this.useDragEnter) {\r\n            if (!this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = true;\r\n                this.onFileOver.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n        }\r\n    }\r\n    onDragLeave(event) {\r\n        if (!this.isDropzoneDisabled()) {\r\n            if (this.isDraggingOverDropZone) {\r\n                this.isDraggingOverDropZone = false;\r\n                this.onFileLeave.emit(event);\r\n            }\r\n            this.preventAndStop(event);\r\n        }\r\n    }\r\n    dropFiles(event) {\r\n        if (this.isDropzoneDisabled()) {\r\n            return;\r\n        }\r\n        this.isDraggingOverDropZone = false;\r\n        if (event.dataTransfer) {\r\n            let items;\r\n            if (event.dataTransfer.items) {\r\n                items = event.dataTransfer.items;\r\n            }\r\n            else {\r\n                items = event.dataTransfer.files;\r\n            }\r\n            this.preventAndStop(event);\r\n            this.checkFiles(items);\r\n        }\r\n    }\r\n    /**\r\n     * Processes the change event of the file input and adds the given files.\r\n     * @param Event event\r\n     */\r\n    uploadFiles(event) {\r\n        if (this.isDropzoneDisabled()) {\r\n            return;\r\n        }\r\n        if (event.target) {\r\n            const items = event.target.files || [];\r\n            this.checkFiles(items);\r\n            this.resetFileInput();\r\n        }\r\n    }\r\n    getFakeDropEntry(file) {\r\n        const fakeFileEntry = {\r\n            name: file.name,\r\n            isDirectory: false,\r\n            isFile: true,\r\n            file: (callback) => callback(file),\r\n        };\r\n        return new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\r\n    }\r\n    checkFile(item) {\r\n        if (!item) {\r\n            return;\r\n        }\r\n        // if (\"getAsFile\" in item) {\r\n        //   const file = item.getAsFile();\r\n        //   if (file) {\r\n        //     this.addToQueue(\r\n        //       this.getFakeDropEntry(file)\r\n        //     );\r\n        //     return;\r\n        //   }\r\n        // }\r\n        if (\"webkitGetAsEntry\" in item) {\r\n            let entry = item.webkitGetAsEntry();\r\n            if (entry) {\r\n                if (entry.isFile) {\r\n                    const toUpload = new NgxFileDropEntry(entry.name, entry);\r\n                    this.addToQueue(toUpload);\r\n                }\r\n                else if (entry.isDirectory) {\r\n                    this.traverseFileTree(entry, entry.name);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        this.addToQueue(this.getFakeDropEntry(item));\r\n    }\r\n    checkFiles(items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n            this.checkFile(items[i]);\r\n        }\r\n        if (this.dropEventTimerSubscription) {\r\n            this.dropEventTimerSubscription.unsubscribe();\r\n        }\r\n        this.dropEventTimerSubscription = timer(200, 200)\r\n            .subscribe(() => {\r\n            if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n                const files = this.files;\r\n                this.files = [];\r\n                this.onFileDrop.emit(files);\r\n            }\r\n        });\r\n    }\r\n    traverseFileTree(item, path) {\r\n        if (item.isFile) {\r\n            const toUpload = new NgxFileDropEntry(path, item);\r\n            this.files.push(toUpload);\r\n        }\r\n        else {\r\n            path = path + '/';\r\n            const dirReader = item.createReader();\r\n            let entries = [];\r\n            const readEntries = () => {\r\n                this.numOfActiveReadEntries++;\r\n                dirReader.readEntries((result) => {\r\n                    if (!result.length) {\r\n                        // add empty folders\r\n                        if (entries.length === 0) {\r\n                            const toUpload = new NgxFileDropEntry(path, item);\r\n                            this.zone.run(() => {\r\n                                this.addToQueue(toUpload);\r\n                            });\r\n                        }\r\n                        else {\r\n                            for (let i = 0; i < entries.length; i++) {\r\n                                this.zone.run(() => {\r\n                                    this.traverseFileTree(entries[i], path + entries[i].name);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // continue with the reading\r\n                        entries = entries.concat(result);\r\n                        readEntries();\r\n                    }\r\n                    this.numOfActiveReadEntries--;\r\n                });\r\n            };\r\n            readEntries();\r\n        }\r\n    }\r\n    /**\r\n     * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n     */\r\n    resetFileInput() {\r\n        if (this.fileSelector && this.fileSelector.nativeElement) {\r\n            const fileInputEl = this.fileSelector.nativeElement;\r\n            const fileInputContainerEl = fileInputEl.parentElement;\r\n            const helperFormEl = this.getHelperFormElement();\r\n            const fileInputPlaceholderEl = this.getFileInputPlaceholderElement();\r\n            // Just a quick check so we do not mess up the DOM (will never happen though).\r\n            if (fileInputContainerEl !== helperFormEl) {\r\n                // Insert the form input placeholder in the DOM before the form input element.\r\n                this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl);\r\n                // Add the form input as child of the temporary form element, removing the form input from the DOM.\r\n                this.renderer.appendChild(helperFormEl, fileInputEl);\r\n                // Reset the form, thus clearing the input element of any files.\r\n                helperFormEl.reset();\r\n                // Add the file input back to the DOM in place of the file input placeholder element.\r\n                this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl);\r\n                // Remove the input placeholder from the DOM\r\n                this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Get a cached HTML form element as a helper element to clear the file input element.\r\n     */\r\n    getHelperFormElement() {\r\n        if (!this.helperFormEl) {\r\n            this.helperFormEl = this.renderer.createElement('form');\r\n        }\r\n        return this.helperFormEl;\r\n    }\r\n    /**\r\n     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n     */\r\n    getFileInputPlaceholderElement() {\r\n        if (!this.fileInputPlaceholderEl) {\r\n            this.fileInputPlaceholderEl = this.renderer.createElement('div');\r\n        }\r\n        return this.fileInputPlaceholderEl;\r\n    }\r\n    isDropzoneDisabled() {\r\n        return (this.globalDraggingInProgress || this.disabled);\r\n    }\r\n    addToQueue(item) {\r\n        this.files.push(item);\r\n    }\r\n    preventAndStop(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n}\r\nNgxFileDropComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropComponent, deps: [{ token: i0.NgZone }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxFileDropComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.0\", type: NgxFileDropComponent, selector: \"ngx-file-drop\", inputs: { accept: \"accept\", directory: \"directory\", multiple: \"multiple\", dropZoneLabel: \"dropZoneLabel\", dropZoneClassName: \"dropZoneClassName\", useDragEnter: \"useDragEnter\", contentClassName: \"contentClassName\", showBrowseBtn: \"showBrowseBtn\", browseBtnClassName: \"browseBtnClassName\", browseBtnLabel: \"browseBtnLabel\", disabled: \"disabled\" }, outputs: { onFileDrop: \"onFileDrop\", onFileOver: \"onFileOver\", onFileLeave: \"onFileLeave\" }, queries: [{ propertyName: \"contentTemplate\", first: true, predicate: NgxFileDropContentTemplateDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: \"fileSelector\", first: true, predicate: [\"fileSelector\"], descendants: true, static: true }], ngImport: i0, template: \"<div [className]=\\\"dropZoneClassName\\\"\\r\\n     [class.ngx-file-drop__drop-zone--over]=\\\"isDraggingOverDropZone\\\"\\r\\n     (drop)=\\\"dropFiles($event)\\\"\\r\\n     (dragover)=\\\"onDragOver($event)\\\"\\r\\n     (dragenter)=\\\"onDragEnter($event)\\\"\\r\\n     (dragleave)=\\\"onDragLeave($event)\\\">\\r\\n  <div [className]=\\\"contentClassName\\\">\\r\\n    <input \\r\\n      type=\\\"file\\\" \\r\\n      #fileSelector \\r\\n      [accept]=\\\"accept\\\" \\r\\n      [attr.directory]=\\\"directory || undefined\\\" \\r\\n      [attr.webkitdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.mozdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.msdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.odirectory]=\\\"directory || undefined\\\"\\r\\n      [multiple]=\\\"multiple\\\"\\r\\n      (change)=\\\"uploadFiles($event)\\\" \\r\\n      class=\\\"ngx-file-drop__file-input\\\" \\r\\n    />\\r\\n\\r\\n    <ng-template #defaultContentTemplate>\\r\\n      <div *ngIf=\\\"dropZoneLabel\\\" class=\\\"ngx-file-drop__drop-zone-label\\\">{{dropZoneLabel}}</div>\\r\\n      <div *ngIf=\\\"showBrowseBtn\\\">\\r\\n        <input type=\\\"button\\\" [className]=\\\"browseBtnClassName\\\" value=\\\"{{browseBtnLabel}}\\\" (click)=\\\"openFileSelector($event)\\\" />\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template\\r\\n      [ngTemplateOutlet]=\\\"contentTemplate || defaultContentTemplate\\\"\\r\\n      [ngTemplateOutletContext]=\\\"{ openFileSelector: openFileSelector }\\\">\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\\r\\n\", styles: [\".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:#93939380}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'ngx-file-drop', template: \"<div [className]=\\\"dropZoneClassName\\\"\\r\\n     [class.ngx-file-drop__drop-zone--over]=\\\"isDraggingOverDropZone\\\"\\r\\n     (drop)=\\\"dropFiles($event)\\\"\\r\\n     (dragover)=\\\"onDragOver($event)\\\"\\r\\n     (dragenter)=\\\"onDragEnter($event)\\\"\\r\\n     (dragleave)=\\\"onDragLeave($event)\\\">\\r\\n  <div [className]=\\\"contentClassName\\\">\\r\\n    <input \\r\\n      type=\\\"file\\\" \\r\\n      #fileSelector \\r\\n      [accept]=\\\"accept\\\" \\r\\n      [attr.directory]=\\\"directory || undefined\\\" \\r\\n      [attr.webkitdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.mozdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.msdirectory]=\\\"directory || undefined\\\"\\r\\n      [attr.odirectory]=\\\"directory || undefined\\\"\\r\\n      [multiple]=\\\"multiple\\\"\\r\\n      (change)=\\\"uploadFiles($event)\\\" \\r\\n      class=\\\"ngx-file-drop__file-input\\\" \\r\\n    />\\r\\n\\r\\n    <ng-template #defaultContentTemplate>\\r\\n      <div *ngIf=\\\"dropZoneLabel\\\" class=\\\"ngx-file-drop__drop-zone-label\\\">{{dropZoneLabel}}</div>\\r\\n      <div *ngIf=\\\"showBrowseBtn\\\">\\r\\n        <input type=\\\"button\\\" [className]=\\\"browseBtnClassName\\\" value=\\\"{{browseBtnLabel}}\\\" (click)=\\\"openFileSelector($event)\\\" />\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n    <ng-template\\r\\n      [ngTemplateOutlet]=\\\"contentTemplate || defaultContentTemplate\\\"\\r\\n      [ngTemplateOutletContext]=\\\"{ openFileSelector: openFileSelector }\\\">\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\\r\\n\", styles: [\".ngx-file-drop__drop-zone{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over{background-color:#93939380}.ngx-file-drop__content{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label{text-align:center}.ngx-file-drop__file-input{display:none}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.Renderer2 }]; }, propDecorators: { accept: [{\r\n                type: Input\r\n            }], directory: [{\r\n                type: Input\r\n            }], multiple: [{\r\n                type: Input\r\n            }], dropZoneLabel: [{\r\n                type: Input\r\n            }], dropZoneClassName: [{\r\n                type: Input\r\n            }], useDragEnter: [{\r\n                type: Input\r\n            }], contentClassName: [{\r\n                type: Input\r\n            }], showBrowseBtn: [{\r\n                type: Input\r\n            }], browseBtnClassName: [{\r\n                type: Input\r\n            }], browseBtnLabel: [{\r\n                type: Input\r\n            }], onFileDrop: [{\r\n                type: Output\r\n            }], onFileOver: [{\r\n                type: Output\r\n            }], onFileLeave: [{\r\n                type: Output\r\n            }], contentTemplate: [{\r\n                type: ContentChild,\r\n                args: [NgxFileDropContentTemplateDirective, { read: TemplateRef }]\r\n            }], fileSelector: [{\r\n                type: ViewChild,\r\n                args: ['fileSelector', { static: true }]\r\n            }], disabled: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxFileDropModule {\r\n}\r\nNgxFileDropModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxFileDropModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropModule, bootstrap: [NgxFileDropComponent], declarations: [NgxFileDropComponent,\r\n        NgxFileDropContentTemplateDirective], imports: [CommonModule], exports: [NgxFileDropComponent,\r\n        NgxFileDropContentTemplateDirective] });\r\nNgxFileDropModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropModule, providers: [], imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: NgxFileDropModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        NgxFileDropComponent,\r\n                        NgxFileDropContentTemplateDirective,\r\n                    ],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    exports: [\r\n                        NgxFileDropComponent,\r\n                        NgxFileDropContentTemplateDirective,\r\n                    ],\r\n                    providers: [],\r\n                    bootstrap: [\r\n                        NgxFileDropComponent\r\n                    ],\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxFileDropComponent, NgxFileDropContentTemplateDirective, NgxFileDropEntry, NgxFileDropModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}