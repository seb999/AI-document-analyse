{"ast":null,"code":"import _asyncToGenerator from \"C:/_git/OpenAI/EwrsDocAnalyses/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate, __param } from \"tslib\";\nimport { Component, Inject, ViewChild } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  constructor(http, baseUrl, httpService, signalRService) {\n    this.httpService = httpService;\n    this.signalRService = signalRService;\n    this.files = [];\n    this.docxContent = \"\";\n    this.theText = \"\";\n    this.documentList = [];\n    this.isProgreeBarShow = false;\n    this.isEpi = false;\n    this.baseUrl = baseUrl;\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.metaData = {\n        title: \"\",\n        language: '',\n        type: '',\n        category: '',\n        tags: '',\n        disease: ''\n      };\n      _this.signalRService.startConnection();\n      _this.signalRService.openDataListener();\n      _this.signalRService.onMessage().subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (message) {\n          _this.serverMsg = message;\n          if (_this.serverMsg.msgName == 'newFile') {\n            _this.theText = _this.serverMsg.data;\n          }\n          if (_this.serverMsg.msgName == 'chatGptDone') {\n            _this.isProgreeBarShow = false;\n            _this.getDocumentList();\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      _this.getDocumentList();\n    })();\n  }\n  isExcelFile(option) {\n    return option.toLowerCase().endsWith('.xlsx') || option.toLowerCase().endsWith('.xls');\n  }\n  openFileExplorer() {\n    this.fileInput.nativeElement.click();\n  }\n  onFileSelected(event) {\n    const inputElement = event.target;\n    if (inputElement.files && inputElement.files[0]) {\n      const selectedFile = inputElement.files[0];\n      // Use the selected file as needed\n      console.log('Selected file: ' + selectedFile.name);\n      // You can also perform other actions, such as uploading the file to a server.\n    }\n  }\n\n  handleCheckboxChange(event) {\n    this.isEpi = event.target.checked;\n    if (this.isEpi) {\n      console.log('Checkbox is checked.');\n      const apiUrl = this.baseUrl + \"home/InitChatGpt\";\n      this.httpService.xhr({\n        url: apiUrl,\n        method: 'GET'\n      }).subscribe(response => {\n        console.log(response);\n        this.documentList = response;\n      }, error => {\n        console.error('Error:', error);\n      });\n    } else {\n      console.log('Checkbox is unchecked.');\n      // Perform some action when the checkbox is unchecked.\n    }\n  }\n\n  getDocumentList() {\n    const apiUrl = this.baseUrl + \"home/GetDocuments\";\n    this.httpService.xhr({\n      url: apiUrl,\n      method: 'GET'\n    }).subscribe(response => {\n      console.log(response);\n      this.documentList = response;\n    }, error => {\n      console.error('Error:', error);\n    });\n  }\n  getDocListMetadata() {\n    this.isProgreeBarShow = true;\n    const apiUrl = this.baseUrl + \"home/GetDocumentMetadata\";\n    this.httpService.xhr({\n      url: apiUrl,\n      method: 'GET'\n    }).subscribe(response => {}, error => {\n      console.error('Error:', error);\n    });\n  }\n  getMetadata() {\n    const apiUrl = this.baseUrl + \"home/GetMetadata\";\n    this.httpService.xhr({\n      url: apiUrl,\n      method: 'POST',\n      data: this.theText\n    }).subscribe(response => {\n      this.metaData = response;\n    }, error => {\n      console.error('Error:', error);\n    });\n  }\n  dropped(files) {\n    this.files = files;\n    console.log(files);\n    for (const droppedFile of files) {\n      // Is it a file?\n      if (droppedFile.fileEntry.isFile) {\n        const fileEntry = droppedFile.fileEntry;\n        fileEntry.file(file => {\n          this.downloadFile(file);\n        });\n      } else {\n        // It was a directory (empty directories are added, otherwise only files)\n        const fileEntry = droppedFile.fileEntry;\n        console.log(droppedFile.relativePath, fileEntry);\n      }\n    }\n  }\n  fileOver(event) {\n    console.log(event);\n  }\n  fileLeave(event) {\n    console.log(event);\n  }\n  downloadFile(file) {\n    const blob = new Blob([file], {\n      type: file.type\n    });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = file.name;\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n__decorate([ViewChild('fileInput', {\n  static: false\n})], HomeComponent.prototype, \"fileInput\", void 0);\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n}), __param(1, Inject('BASE_URL'))], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","ViewChild","HomeComponent","constructor","http","baseUrl","httpService","signalRService","ngOnInit","metaData","title","language","type","category","tags","disease","startConnection","openDataListener","onMessage","subscribe","message","serverMsg","msgName","theText","data","isProgreeBarShow","getDocumentList","isExcelFile","option","toLowerCase","endsWith","openFileExplorer","fileInput","nativeElement","click","onFileSelected","event","inputElement","target","files","selectedFile","console","log","name","handleCheckboxChange","isEpi","checked","apiUrl","xhr","url","method","response","documentList","error","getDocListMetadata","getMetadata","dropped","droppedFile","fileEntry","isFile","file","downloadFile","relativePath","fileOver","fileLeave","blob","Blob","window","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","revokeObjectURL","__decorate","static","selector","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["C:\\_git\\OpenAI\\EwrsDocAnalyses\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, ElementRef, Inject, ViewChild } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { HttpSettings, HttpService } from '../service/http.service';\r\nimport { Observable } from 'rxjs';\r\nimport { NgxFileDropEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from 'ngx-file-drop';\r\nimport { SignalRService } from '../service/signalR.service';\r\nimport { ServerMsg } from '../class/serverMsg';\r\nimport { MetaData } from '../class/metaData';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\n\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent {\r\n  @ViewChild('fileInput', { static: false }) fileInput!: ElementRef;\r\n\r\n  private baseUrl: string;\r\n  public files: NgxFileDropEntry[] = [];\r\n  public docxContent: string = \"\";\r\n  public serverMsg: ServerMsg | undefined;\r\n  public theText:string = \"\";\r\n  public metaData: MetaData | undefined;\r\n  public documentList: string[] = [];\r\n  public isProgreeBarShow: boolean = false;\r\n  public isEpi: boolean = false;\r\n\r\n  constructor(http: HttpClient,\r\n    @Inject('BASE_URL') baseUrl: string,\r\n    private httpService: HttpService,\r\n    private signalRService: SignalRService,) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.metaData = { title: \"\", language: '', type: '', category: '', tags:'', disease: ''};\r\n\r\n    this.signalRService.startConnection();\r\n    this.signalRService.openDataListener();\r\n\r\n    this.signalRService.onMessage().subscribe(async (message: ServerMsg) => {\r\n      this.serverMsg = message;\r\n      if (this.serverMsg.msgName == 'newFile') {\r\n        this.theText = this.serverMsg.data;\r\n      }\r\n      if (this.serverMsg.msgName == 'chatGptDone') {\r\n        this.isProgreeBarShow = false;\r\n        this.getDocumentList();\r\n      }\r\n    });\r\n\r\n   this.getDocumentList();\r\n  }\r\n\r\n  isExcelFile(option: string): boolean {\r\n    return option.toLowerCase().endsWith('.xlsx') || option.toLowerCase().endsWith('.xls');\r\n  }\r\n\r\n  openFileExplorer() {\r\n    this.fileInput.nativeElement.click();\r\n  }\r\n\r\n  onFileSelected(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    if (inputElement.files && inputElement.files[0]) {\r\n      const selectedFile = inputElement.files[0];\r\n      // Use the selected file as needed\r\n      console.log('Selected file: ' + selectedFile.name);\r\n      // You can also perform other actions, such as uploading the file to a server.\r\n    }\r\n  }\r\n\r\n  handleCheckboxChange(event: any) {\r\n    this.isEpi = event.target.checked;\r\n\r\n    if (this.isEpi) {\r\n      console.log('Checkbox is checked.');\r\n      const apiUrl = this.baseUrl + \"home/InitChatGpt\"; \r\n      this.httpService.xhr<any>({ url: apiUrl, method: 'GET' }).subscribe(\r\n        (response) => {\r\n          console.log(response);\r\n          this.documentList = response;\r\n        },\r\n        (error) => {\r\n          console.error('Error:', error);\r\n        }\r\n      );\r\n    } else {\r\n      console.log('Checkbox is unchecked.');\r\n      // Perform some action when the checkbox is unchecked.\r\n    }\r\n  }\r\n\r\n  getDocumentList() {\r\n    const apiUrl = this.baseUrl + \"home/GetDocuments\"; \r\n    this.httpService.xhr<any>({ url: apiUrl, method: 'GET' }).subscribe(\r\n      (response) => {\r\n        console.log(response);\r\n        this.documentList = response;\r\n      },\r\n      (error) => {\r\n        console.error('Error:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getDocListMetadata() {\r\n    this.isProgreeBarShow = true;\r\n    const apiUrl = this.baseUrl + \"home/GetDocumentMetadata\";\r\n    this.httpService.xhr<any>({ url: apiUrl, method: 'GET' }).subscribe(\r\n      (response) => {\r\n      },\r\n      (error) => {\r\n        console.error('Error:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getMetadata() {\r\n    const apiUrl = this.baseUrl + \"home/GetMetadata\";\r\n\r\n    this.httpService.xhr<any>({ url: apiUrl, method: 'POST', data: this.theText }).subscribe(\r\n      (response) => {\r\n       this.metaData = response;\r\n      },\r\n      (error) => {\r\n        console.error('Error:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  public dropped(files: NgxFileDropEntry[]) {\r\n    this.files = files;\r\n    console.log(files);\r\n    for (const droppedFile of files) {\r\n\r\n      // Is it a file?\r\n      if (droppedFile.fileEntry.isFile) {\r\n        const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;\r\n        fileEntry.file((file: File) => {\r\n          this.downloadFile(file);\r\n        });\r\n      } else {\r\n        // It was a directory (empty directories are added, otherwise only files)\r\n        const fileEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;\r\n        console.log(droppedFile.relativePath, fileEntry);\r\n      }\r\n    }\r\n  }\r\n\r\n  public fileOver(event: any) {\r\n    console.log(event);\r\n  }\r\n\r\n  public fileLeave(event: any) {\r\n    console.log(event);\r\n  }\r\n\r\n  private downloadFile(file: File) {\r\n    const blob = new Blob([file], { type: file.type });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.style.display = 'none';\r\n    a.href = url;\r\n    a.download = file.name;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}